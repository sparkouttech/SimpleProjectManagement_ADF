package ProjectManagementmodel.BC.EO;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jan 27 15:32:01 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectRequestsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ProjectCode,
        RequestId,
        RequestDescription,
        ProgrammerCode,
        Status,
        Assigned,
        Started,
        Completed,
        Users,
        ProjectMaster,
        DependencyRequests;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int PROJECTCODE = AttributesEnum.ProjectCode.index();
    public static final int REQUESTID = AttributesEnum.RequestId.index();
    public static final int REQUESTDESCRIPTION = AttributesEnum.RequestDescription.index();
    public static final int PROGRAMMERCODE = AttributesEnum.ProgrammerCode.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int ASSIGNED = AttributesEnum.Assigned.index();
    public static final int STARTED = AttributesEnum.Started.index();
    public static final int COMPLETED = AttributesEnum.Completed.index();
    public static final int USERS = AttributesEnum.Users.index();
    public static final int PROJECTMASTER = AttributesEnum.ProjectMaster.index();
    public static final int DEPENDENCYREQUESTS = AttributesEnum.DependencyRequests.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProjectRequestsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("ProjectManagementmodel.BC.EO.ProjectRequests");
    }

    /**
     * Gets the attribute value for ProjectCode, using the alias name ProjectCode.
     * @return the value of ProjectCode
     */
    public BigDecimal getProjectCode() {
        return (BigDecimal) getAttributeInternal(PROJECTCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectCode.
     * @param value value to set the ProjectCode
     */
    public void setProjectCode(BigDecimal value) {
        setAttributeInternal(PROJECTCODE, value);
    }

    /**
     * Gets the attribute value for RequestId, using the alias name RequestId.
     * @return the value of RequestId
     */
    public BigDecimal getRequestId() {
        return (BigDecimal) getAttributeInternal(REQUESTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RequestId.
     * @param value value to set the RequestId
     */
    public void setRequestId(BigDecimal value) {
        setAttributeInternal(REQUESTID, value);
    }

    /**
     * Gets the attribute value for RequestDescription, using the alias name RequestDescription.
     * @return the value of RequestDescription
     */
    public String getRequestDescription() {
        return (String) getAttributeInternal(REQUESTDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for RequestDescription.
     * @param value value to set the RequestDescription
     */
    public void setRequestDescription(String value) {
        setAttributeInternal(REQUESTDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ProgrammerCode, using the alias name ProgrammerCode.
     * @return the value of ProgrammerCode
     */
    public BigDecimal getProgrammerCode() {
        return (BigDecimal) getAttributeInternal(PROGRAMMERCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProgrammerCode.
     * @param value value to set the ProgrammerCode
     */
    public void setProgrammerCode(BigDecimal value) {
        setAttributeInternal(PROGRAMMERCODE, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the value of Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for Assigned, using the alias name Assigned.
     * @return the value of Assigned
     */
    public Timestamp getAssigned() {
        return (Timestamp) getAttributeInternal(ASSIGNED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Assigned.
     * @param value value to set the Assigned
     */
    public void setAssigned(Timestamp value) {
        setAttributeInternal(ASSIGNED, value);
    }

    /**
     * Gets the attribute value for Started, using the alias name Started.
     * @return the value of Started
     */
    public Timestamp getStarted() {
        return (Timestamp) getAttributeInternal(STARTED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Started.
     * @param value value to set the Started
     */
    public void setStarted(Timestamp value) {
        setAttributeInternal(STARTED, value);
    }

    /**
     * Gets the attribute value for Completed, using the alias name Completed.
     * @return the value of Completed
     */
    public Timestamp getCompleted() {
        return (Timestamp) getAttributeInternal(COMPLETED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Completed.
     * @param value value to set the Completed
     */
    public void setCompleted(Timestamp value) {
        setAttributeInternal(COMPLETED, value);
    }

    /**
     * @return the associated entity UsersImpl.
     */
    public UsersImpl getUsers() {
        return (UsersImpl) getAttributeInternal(USERS);
    }

    /**
     * Sets <code>value</code> as the associated entity UsersImpl.
     */
    public void setUsers(UsersImpl value) {
        setAttributeInternal(USERS, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public ProjectMasterImpl getProjectMaster() {
        return (ProjectMasterImpl) getAttributeInternal(PROJECTMASTER);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setProjectMaster(ProjectMasterImpl value) {
        setAttributeInternal(PROJECTMASTER, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDependencyRequests() {
        return (RowIterator) getAttributeInternal(DEPENDENCYREQUESTS);
    }


    /**
     * @param requestId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal requestId) {
        return new Key(new Object[] { requestId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT){
            SequenceImpl s = new SequenceImpl("REQ_SEQ",getDBTransaction());
            BigDecimal cuser_seq = new BigDecimal(s.getSequenceNumber().toString());
            setRequestId(cuser_seq);
            }
        super.doDML(operation, e);
    }
}

