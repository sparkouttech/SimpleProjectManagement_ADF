package ProjectManagementmodel.BC.EO;

import java.math.BigDecimal;

import java.security.SecureRandom;
import java.security.spec.KeySpec;

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import oracle.igf.ids.util.Base64;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jan 27 12:49:02 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UsersImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        UserId,
        UserName,
        UserPassword,
        UserGroup,
        UserSalt,
        ConfirmPassword,
        ProjectRequests,
        ProjectMaster,
        DependencyRequests;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int USERID = AttributesEnum.UserId.index();
    public static final int USERNAME = AttributesEnum.UserName.index();
    public static final int USERPASSWORD = AttributesEnum.UserPassword.index();
    public static final int USERGROUP = AttributesEnum.UserGroup.index();
    public static final int USERSALT = AttributesEnum.UserSalt.index();
    public static final int CONFIRMPASSWORD = AttributesEnum.ConfirmPassword.index();
    public static final int PROJECTREQUESTS = AttributesEnum.ProjectRequests.index();
    public static final int PROJECTMASTER = AttributesEnum.ProjectMaster.index();
    public static final int DEPENDENCYREQUESTS = AttributesEnum.DependencyRequests.index();

    /**
     * This is the default constructor (do not remove).
     */
    public UsersImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("ProjectManagementmodel.BC.EO.Users");
    }


    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public BigDecimal getUserId() {
        return (BigDecimal) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(BigDecimal value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for UserName, using the alias name UserName.
     * @return the value of UserName
     */
    public String getUserName() {
        return (String) getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserName.
     * @param value value to set the UserName
     */
    public void setUserName(String value) {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * Gets the attribute value for UserPassword, using the alias name UserPassword.
     * @return the value of UserPassword
     */
    public String getUserPassword() {
        return (String) getAttributeInternal(USERPASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserPassword.
     * @param value value to set the UserPassword
     */
    public void setUserPassword(String value) {
        setAttributeInternal(USERPASSWORD, value);
    }

    /**
     * Gets the attribute value for UserGroup, using the alias name UserGroup.
     * @return the value of UserGroup
     */
    public String getUserGroup() {
        return (String) getAttributeInternal(USERGROUP);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserGroup.
     * @param value value to set the UserGroup
     */
    public void setUserGroup(String value) {
        setAttributeInternal(USERGROUP, value);
    }

    /**
     * Gets the attribute value for UserSalt, using the alias name UserSalt.
     * @return the value of UserSalt
     */
    public String getUserSalt() {
        return (String) getAttributeInternal(USERSALT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserSalt.
     * @param value value to set the UserSalt
     */
    public void setUserSalt(String value) {
        setAttributeInternal(USERSALT, value);
    }

    /**
     * Gets the attribute value for ConfirmPassword, using the alias name ConfirmPassword.
     * @return the value of ConfirmPassword
     */
    public String getConfirmPassword() {
        return (String) getAttributeInternal(CONFIRMPASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfirmPassword.
     * @param value value to set the ConfirmPassword
     */
    public void setConfirmPassword(String value) {
        setAttributeInternal(CONFIRMPASSWORD, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getProjectRequests() {
        return (RowIterator) getAttributeInternal(PROJECTREQUESTS);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getProjectMaster() {
        return (RowIterator) getAttributeInternal(PROJECTMASTER);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDependencyRequests() {
        return (RowIterator) getAttributeInternal(DEPENDENCYREQUESTS);
    }


    /**
     * @param userId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal userId) {
        return new Key(new Object[] { userId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        //getting the userid for the customer based on the sequence
        if (this.getUserPassword().equals(this.getConfirmPassword())){
        if (operation == DML_INSERT){
            SequenceImpl s = new SequenceImpl("C_USER_SEQ", getDBTransaction());
            BigDecimal cuser_seq = new BigDecimal(s.getSequenceNumber().toString());
            setUserId(cuser_seq);
            }
        //generating the hash value and salt value
        if (operation == DML_INSERT){
            try{
            String salt = getNewSalt();
            String encryptedPassword = getEncryptedPassword(getUserPassword(), salt);
            setUserPassword(encryptedPassword);
            setUserSalt(salt);
            }
            catch(Exception ex){
                throw new JboException(ex);
                }

            }
        }
        else{
            throw new JboException("Sorry!!! Password Doesn't Match with the confirm password");
            }
        super.doDML(operation, e);
    }
    
    private String getNewSalt() throws Exception{
            SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
            byte[] salt = new byte[8];
            random.nextBytes(salt);
            return Base64.encode(salt);
        }

    private String getEncryptedPassword(String password, String salt) throws Exception {
            String algorithm = "PBKDF2WithHmacSHA1";
            int derivedKeyLength = 160; // for SHA1
            int iterations = 20000; // NIST specifies 10000
            byte[] saltBytes = Base64.decode(salt);
            KeySpec spec = new PBEKeySpec(password.toCharArray(), saltBytes, iterations, derivedKeyLength);
            SecretKeyFactory f = SecretKeyFactory.getInstance(algorithm);
            byte[] encBytes = f.generateSecret(spec).getEncoded();
            return Base64.encode(encBytes);
        }
}

